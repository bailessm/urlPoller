Parameters:
  pollerFunctionCode:
    Type: String
    Default: "pollURL/pollURL.zip"
  pollerHandler:
    Type: String
    Default: 'lambda_function.lambda_handler'
  pullerFunctionCode:
    Type: String
    Default: "pullURLs/pullURLs.zip"
  pullerHandler:
    Type: String
    Default: 'lambda_function.lambda_handler'
  testRecordsCode:
    Type: String
    Default: 'testRecords/testRecords.zip'
  testRecordsHandler:
    Type: String
    Default: 'testRecords.lambda_handler'
  codeBucket:
    Type: String
    Default: "mcb-lambda-functions"
  pollerAppName:
    Type: String
    Default: "url.poller.test"
  pollerInterval:
    Type: String
    Default: "rate(1 minute)"
  dynamoDBMaxReadCapacity:
    Type: Number
    Default: 250
  dynamoDBMaxWriteCapacity:
    Type: Number
    Default: 250

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "URL Poller Application Settings"
        Parameters: 
          - pollerAppName
          - pollerInterval
      - 
        Label: 
          default: "Lambda Function Code"
        Parameters: 
          - codeBucket
          - pullerFunctionCode
          - pullerHandler
          - pollerFunctionCode
          - pollerHandler
      - 
        Label: 
          default: "DynamoDB Configuration"
        Parameters: 
          - dynamoDBMaxReadCapacity
          - dynamoDBMaxWriteCapacity
    ParameterLabels: 
      pollerAppName: 
        default: "The Name of your poller application"
      pollerInterval:
        default: "The interval at which you will poll your URLs"
      codeBucket:
        default: "The Bucket where your lambda function code is stored"
      pullerFunctionCode:
        default: "S3 Key of the function which pulls URLs from dynamodb and emits poll events"
      pullerHandler:
        default: "Handler for the function that pulls URLs from dynamodb"
      pollerFunctionCode:
        default: "S3 Key of the url poller function"
      pollerHandler:
        default: "Handler for the function that polls the URLs"
      dynamoDBMaxReadCapacity:
        default: "Maximum read capacity that your table can scale to"
      dynamoDBMaxWriteCapacity:
        default: "Maximum write capacity that your table can scale to"
Resources:

  ###Dynamodb Table to hold URLs to poll
  ###each item require 3 attributes, id(hash), protocol(string, ex. http), 
  ###hostname(string, ex. amazon.com), path(string, ex. / or /default.html)
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "URLid"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "URLid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ###Autoscaling rules for dynamodb table
  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref dynamoDBMaxWriteCapacity
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref DDBTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref dynamoDBMaxReadCapacity
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref DDBTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  ###Lambda Function and IAM to pull URLs from DynamoDB table
  ###and push them to cloudwatch events to be polled.
  urlPuller:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref codeBucket
        S3Key: !Ref pullerFunctionCode
      Handler: !Ref pullerHandler
      Role: !GetAtt [ urlPullerRole, Arn ]
      Runtime: 'python3.7'
      Tags: 
        - 
          Key: "Environment"
          Value: !Ref pollerAppName
      Timeout: 30
  urlPullerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        -
                    PolicyName: "urlPullerPolicy"
                    PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                        -
                          Effect: "Allow"
                          Action: 
                            - "events:PutEvents"
                            - "dynamodb:Scan"
                          Resource: "*"

  ###Lambda Function and IAM role to poll URLs
  urlPoller:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref codeBucket
        S3Key: !Ref pollerFunctionCode
      Handler: !Ref pollerHandler
      Role: !GetAtt [ urlPollerRole, Arn ]
      Runtime: 'python3.7'
      Tags: 
        - 
          Key: "Environment"
          Value: !Ref pollerAppName
      Timeout: 30
  urlPollerRole:  
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'

  ###Lambda Function and IAM to insert test records
  testRecordsFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref codeBucket
        S3Key: !Ref testRecordsCode
      Handler: !Ref testRecordsHandler
      Role: !GetAtt [ testRecordsRole, Arn ]
      Runtime: 'python3.7'
      Environment:
        Variables:
          dynamodbTable: !GetAtt DDBTable.Arn
      Tags: 
        - 
          Key: "Environment"
          Value: !Ref pollerAppName
      Timeout: 30
  testRecordsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        -
          PolicyName: "instanceSchedulerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                Resource: !GetAtt DDBTable.Arn

  ###cloudwatch event rule to trigger urlPuller function
  ###pollerAppName is passed to be the cloudwatch event source
  ###dynamoTable is passed to the function to process
  pullerScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled Rule to Pull URLs to Poll"
      ScheduleExpression: !Ref pollerInterval
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "urlPuller"
              - "Arn"
          Id: "TargetFunctionV1"
          Input: !Sub
            - '{"pollerSource":"${source}","dynamoTable":"${dynamoTable}"}'
            - { source: !Ref pollerAppName , dynamoTable: !GetAtt DDBTable.Arn}
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "urlPuller"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "pullerScheduledRule"
          - "Arn"

  ###cloudwatch event rule to urlPoller function
  ###passes the $.detail of the event to the function which is the url to be polled
  pollerRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Poll url for health."
      EventPattern: !Sub 
        - '{"source": ["${source}"]}'
        - { source: !Ref pollerAppName }
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "urlPoller"
              - "Arn"
          Id: "TargetFunctionV1"
          InputPath: "$.detail"
  PermissionForPollerToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "urlPoller"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "pollerRule"
          - "Arn"

Outputs:
  DynamoDBTable:
    Description: 'The DynamoDB table that holds the URLs to Query'
    Value: !GetAtt DDBTable.Arn
  testRecordsFunction:
    Description: "Arn to load test records into the solution"
    Value: !GetAtt testRecordsFunction.Arn